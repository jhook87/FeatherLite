// Prisma schema for Sprint 3. Builds on top of the existing FeatherLite storefront.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // Switch the database provider to PostgreSQL. SQLite is not suitable for production
  // deployments on Vercel because the filesystem is read‑only at runtime. A cloud
  // Postgres instance (e.g. Neon, Supabase, RDS) should be configured via the
  // DATABASE_URL environment variable.
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collection {
  id        String    @id @default(cuid())
  slug      String    @unique
  name      String
  season    String?
  startDate DateTime?
  endDate   DateTime?
  products  Product[]
}

model Product {
  id           String      @id @default(cuid())
  slug         String      @unique
  name         String
  kind         String
  description  String?
  ingredients  String?
  live         Boolean     @default(true)
  collection   Collection? @relation(fields: [collectionId], references: [id])
  collectionId String?
  variants     Variant[]
  images       Image[]
  reviews      Review[]

  /// Relative path to a primary image for this product. When present, the front end
  /// will render this image instead of the default placeholder. Paths should be
  /// relative to the public/images/products directory.
  imagePath    String?

  /// Optional small thumbnail path for use in grid views. If not provided, the
  /// `imagePath` will be used and resized by the client.
  thumbnailPath String?

  @@index([slug])
}

model Variant {
  id            String   @id @default(cuid())
  product       Product  @relation(fields: [productId], references: [id])
  productId     String
  name          String
  sku           String   @unique
  priceCents    Int
  stockQty      Int      @default(0)
  stripePriceId String?
  /// Hex value representing this shade; optional until all variants are updated.
  hex           String?

  /// Relative image path specific to this variant (e.g. a close‑up of the shade).
  imagePath     String?

  @@index([sku])
}

model Image {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  alt       String?
  url       String
}

model Order {
  id            String     @id @default(cuid())
  email         String?
  currency      String     @default("usd")
  amountTotal   Int
  stripeSession String     @unique
  createdAt     DateTime   @default(now())
  items         OrderItem[]
}

model OrderItem {
  id         String  @id @default(cuid())
  order      Order   @relation(fields: [orderId], references: [id])
  orderId    String
  sku        String
  qty        Int
  priceCents Int
}

/// Customer reviews for products. Used on the product detail page to build trust.
model Review {
  id        String    @id @default(cuid())
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  name      String?
  rating    Int
  comment   String
  createdAt DateTime  @default(now())
}